-- 1)Stored Procedure to Update Order Status
DELIMITER //
CREATE PROCEDURE UpdateOrderStatus (
    IN orderID INT,
    IN newStatus ENUM('Pending', 'Confirmed', 'Preparing', 'Out for Delivery', 'Delivered', 'Cancelled', 'Failed')
)
BEGIN
    UPDATE Orders
    SET order_status = newStatus
    WHERE order_id = orderID;
END//
DELIMITER ;

-- Example Usage:
-- CALL UpdateOrderStatus(6, 'Confirmed');
-- CALL UpdateOrderStatus(3, 'Out for Delivery');


-- 2)Stored Procedure to Cancel Order
DELIMITER //
CREATE PROCEDURE CancelOrder (
    IN orderID INT,
    IN reason TEXT
)
BEGIN
    UPDATE Orders
    SET order_status = 'Cancelled',
        cancellation_reason = reason
    WHERE order_id = orderID;
END//
DELIMITER ;

-- Example Usage:
-- CALL CancelOrder(7, 'Customer requested cancellation before preparation');

-- 3)Stored Procedure for Failed Delivery
DELIMITER //
CREATE PROCEDURE HandleFailedDelivery (
    IN orderID INT,
    IN reason TEXT
)
BEGIN
    UPDATE Orders
    SET order_status = 'Failed',
        failure_reason = reason
    WHERE order_id = orderID;
END//
DELIMITER ;

-- Example Usage:
-- CALL HandleFailedDelivery(8, 'Customer not available at address');


-- 4)Initial refund
DELIMITER //
CREATE PROCEDURE InitiateRefund (
    IN orderID INT,
    IN refundAmount DECIMAL(10, 2),
    IN reason TEXT
)
BEGIN
    INSERT INTO Refunds (order_id, refund_amount, refund_reason)
    VALUES (orderID, refundAmount, reason);

    -- Optionally update order status to reflect refund process started
    UPDATE Orders
    SET order_status = 'Refund Processing' -- Add this status to ENUM in Orders table if needed
    WHERE order_id = orderID;
END//
DELIMITER ;

-- Example Usage:
-- CALL InitiateRefund(7, 15.00, 'Order cancelled due to restaurant issue');


-- 5) UpdateRefundStatus
DELIMITER //
CREATE PROCEDURE UpdateRefundStatus (
    IN refundID INT,
    IN newStatus ENUM('Pending', 'Approved', 'Rejected', 'Processed')
)
BEGIN
    UPDATE Refunds
    SET refund_status = newStatus
    WHERE refund_id = refundID;
END//
DELIMITER ;

-- Example Usage:
-- CALL UpdateRefundStatus(1, 'Approved');
-- CALL UpdateRefundStatus(1, 'Processed');

-- 6) UpdateCustomerTier
DELIMITER //
CREATE PROCEDURE UpdateCustomerTier (
    IN custID INT
)
BEGIN
    -- Get current total loyalty points for the customer
    SELECT @total_points := points_earned - points_redeemed
    FROM Customer_Loyalty_Points
    WHERE customer_id = custID;

    -- Find the highest tier the customer qualifies for
    SELECT @new_tier_id := tier_id
    FROM Customer_Tiers
    WHERE min_points <= @total_points
    ORDER BY min_points DESC
    LIMIT 1;

    -- You might want to store the current customer tier in the Customers table itself for easier access.
    -- For simplicity here, we'll just demonstrate how to determine the tier.
    -- In a real application, you might add a 'tier_id' column to the 'Customers' table and update it here.

    -- Example: To output the new tier (for demonstration - adjust for your application)
    SELECT @new_tier_id AS CurrentTierID;

END//
DELIMITER ;

-- Example Usage (Trigger will call this after points are awarded):
-- CALL UpdateCustomerTier(1); -- Example manual call to update tier for customer 1


-- 1)Trigger to Auto-Update delivery_completion_time when order_status becomes 'Delivered'
DELIMITER //
CREATE TRIGGER AutoSetDeliveryTime
AFTER UPDATE ON Orders
FOR EACH ROW
BEGIN
    IF NEW.order_status = 'Delivered' AND OLD.order_status <> 'Delivered' THEN
        UPDATE Orders
        SET actual_delivery_time = CURRENT_TIMESTAMP
        WHERE order_id = NEW.order_id;
    END IF;
END//
DELIMITER ;

-- Example:
-- UPDATE Orders SET order_status = 'Delivered' WHERE order_id = 3;
-- (This will automatically set actual_delivery_time for order_id 3)


-- 2) AwardLoyaltyPointsOnDelivery
DELIMITER //
CREATE TRIGGER AwardLoyaltyPointsOnDelivery
AFTER UPDATE ON Orders
FOR EACH ROW
BEGIN
    IF NEW.order_status = 'Delivered' AND OLD.order_status <> 'Delivered' THEN
        -- Calculate points based on total amount (5 points per dollar)
        SET @points_to_earn = FLOOR(NEW.total_amount) * 5;

        -- Update loyalty points for the customer
        UPDATE Customer_Loyalty_Points
        SET points_earned = points_earned + @points_to_earn,
            last_updated = CURRENT_TIMESTAMP
        WHERE customer_id = NEW.customer_id;

        -- Optional: Check if tier upgrade is needed (example logic, needs adjustment based on tier structure)
        CALL UpdateCustomerTier(NEW.customer_id); -- We will define this procedure next
    END IF;
END//
DELIMITER ;

-- Example:
-- UPDATE Orders SET order_status = 'Delivered' WHERE order_id = 6;
-- (This will automatically award loyalty points to customer 1 based on order 6 total_amount)


CREATE INDEX idx_customer_id ON Orders (customer_id);
CREATE INDEX idx_order_status ON Orders (order_status);
-- ... and so on for other relevant columns
